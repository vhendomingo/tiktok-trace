// server.js
import express from 'express';
import fetch from 'node-fetch';
import cors from 'cors';

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static('.')); // serve index.html & style.css from root (for local test)

const COMMON_LOCATIONS = [
  "Manila","Philippines","Cebu","Quezon City","Iloilo","Davao",
  "Jakarta","Indonesia","Bangkok","Thailand","London","UK","United Kingdom",
  "New York","Los Angeles","USA","United States","United States of America",
  "Sydney","Australia","Toronto","Canada","Seoul","South Korea","Tokyo","Japan",
  "Manila, Philippines", "Los Angeles, USA"
];

function inferLocationFromBio(bio){
  if (!bio) return { location: "Unknown", confidence: "low" };
  const b = bio.toLowerCase();
  for (const place of COMMON_LOCATIONS){
    if (b.includes(place.toLowerCase())) {
      return { location: place, confidence: "high" };
    }
  }
  // try simple patterns for country codes / emojis etc
  if (b.match(/\b(ph|philippines|pinoy)\b/i)) return { location: "Philippines", confidence: "medium" };
  if (b.match(/\b(us|usa|united states)\b/i)) return { location: "United States", confidence: "medium" };
  return { location: "Unknown", confidence: "low" };
}

async function scrapeTikTokProfile(username){
  try {
    const url = `https://www.tiktok.com/@${encodeURIComponent(username)}`;
    const res = await fetch(url, {
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"
      },
      redirect: 'follow',
      timeout: 15000
    });
    const html = await res.text();

    // Find the SIGI_STATE script block which typically contains JSON
    const sigiMatch = html.match(/<script id="SIGI_STATE" type="application\/json">([\s\S]*?)<\/script>/);
    if (!sigiMatch) {
      // fallback: some pages embed JSON in other tags; try to extract og:description or basic stats
      const followersMatch = html.match(/"followerCount":\s*(\d+)/);
      const likesMatch = html.match(/"heartCount":\s*(\d+)/);
      const videosMatch = html.match(/"videoCount":\s*(\d+)/);
      const bioMatch = html.match(/<meta name="description" content="([^"]*)"/) || html.match(/"signature":"(.*?)"/);

      return {
        username,
        display_name: username,
        bio: bioMatch ? (bioMatch[1] || bioMatch[0]) : '',
        followers: followersMatch ? Number(followersMatch[1]) : null,
        likes: likesMatch ? Number(likesMatch[1]) : null,
        videos: videosMatch ? Number(videosMatch[1]) : null,
      };
    }

    const jsonText = sigiMatch[1];
    const json = JSON.parse(jsonText);
    const users = json?.UserModule?.users || {};

    // find the matching user key (uniqueId or similar)
    const key = Object.keys(users).find(k => {
      const u = users[k];
      if (!u) return false;
      if ((u.uniqueId && u.uniqueId.toLowerCase() === username.toLowerCase())) return true;
      if ((u.secUid && u.secUid.toLowerCase() === username.toLowerCase())) return true;
      return false;
    }) || Object.keys(users)[0];

    const userData = users[key] || {};
    const stats = userData.stats || {};

    return {
      username,
      display_name: userData?.nickname || userData?.uniqueId || username,
      bio: userData?.signature || '',
      profile_pic: userData?.avatarLarger || userData?.avatarMedium || '',
      followers: Number(stats.followerCount || 0),
      likes: Number(stats.heartCount || 0),
      videos: Number(stats.videoCount || 0),
    };
  } catch (err) {
    console.warn("scrapeTikTokProfile error:", err && err.message);
    return null;
  }
}

app.get('/api/user/:username', async (req, res) => {
  const username = (req.params.username || '').replace(/^@/,'').trim();
  if (!username) return res.status(400).json({ error: 'username required' });

  const scraped = await scrapeTikTokProfile(username);
  if (!scraped) return res.status(404).json({ error: 'could not fetch profile (blocked or changed layout)' });

  // infer location from bio
  const infer = inferLocationFromBio(scraped.bio);
  const result = {
    username: scraped.username,
    display_name: scraped.display_name,
    bio: scraped.bio,
    profile_pic: scraped.profile_pic,
    followers: scraped.followers,
    likes: scraped.likes,
    videos: scraped.videos,
    location: infer.location,
    location_confidence: infer.confidence,
    fetched_at: new Date().toISOString()
  };

  res.json(result);
});

// Optional: an endpoint to show server health
app.get('/health', (req, res) => res.json({ ok: true }));

const PORT = process.env.PORT || 5000;
app.listen(PORT, ()=> console.log(`Server started on port ${PORT}`));
